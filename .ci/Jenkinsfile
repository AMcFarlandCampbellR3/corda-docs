#!groovy
def DOCKER_REPOSITORY = "docsite.software.r3.com"

def MAKE_PARAMS = [
    "PROD_IMAGE=${DOCKER_REPOSITORY}/corda-docs-nginx",
    "PROD_IMAGE_TAG=${env.BRANCH_NAME.replaceAll('/', '-')}-${env.BUILD_ID}",
]

def MAKE_BUILD_TARGETS = [
    'prod-docker-image',
]

def MAKE_PUBLISH_TARGETS = [
    'publish',
]


pipeline {
    agent { label "docker" }

    parameters {
        booleanParam defaultValue: false, description: 'Check it to force publishing Docsite Docker image regardless of the branch it is built for', name: 'FORCE_PUBLISH'
    }

    environment {
      MAKE_HOME = tool name: 'make', type: 'com.cloudbees.jenkins.plugins.customtools.CustomTool'
      JQ_HOME = tool name: 'jq', type: 'com.cloudbees.jenkins.plugins.customtools.CustomTool'
    }

    options {
        timestamps()
        timeout(time: 3, unit: 'HOURS')
        disableConcurrentBuilds() // this makes killAllExistingBuildsForJob always do nothing
        buildDiscarder(logRotator(daysToKeepStr: '7', artifactDaysToKeepStr: '7'))
        ansiColor('xterm')
    }

    stages {
        stage('Build Docker image') {
            steps {
                sh """
                    make ${MAKE_PARAMS.join(' ')} ${MAKE_BUILD_TARGETS.join(' ')}
                """
		        sh 'docker images'
            }
        }
        stage('Publish Docker image to Registry') {
            when {
                anyOf {
                    branch 'master'
                    expression { params.FORCE_PUBLISH }
                }
            }
            steps {
                withDockerRegistry(credentialsId: 'docsite-publisher', url: "https://${DOCKER_REPOSITORY}") {
                    sh """
                        make ${MAKE_PARAMS.join(' ')} ${MAKE_PUBLISH_TARGETS.join(' ')}
                    """
                }
            }
        }
        stage('Deploy Docker image to staging') {
            when {
                anyOf {
                    branch 'master'
                    expression { params.FORCE_PUBLISH }
                }
            }
            steps {
                sshagent(['docsite-staging']) {
                    sh "ssh -F /dev/null -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null docsite@docs-staging.corda.net update-docsite"
                }
            }
        }

    }

    post {
        cleanup {
            deleteDir() /* clean up our workspace */
        }
    }
}
